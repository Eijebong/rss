var searchIndex = {};
searchIndex["rss"] = {"doc":"Library for serializing the RSS web content syndication format.","items":[[3,"Channel","rss","A representation of the `&lt;channel&gt;` element.",null,null],[12,"title","","The name of the channel.",0,null],[12,"link","","The URL for the website corresponding to the channel.",0,null],[12,"description","","A description of the channel.",0,null],[12,"language","","The language of the channel.",0,null],[12,"copyright","","The copyright notice for the channel.",0,null],[12,"managing_editor","","The email address for the managing editor.",0,null],[12,"webmaster","","The email address for the webmaster.",0,null],[12,"pub_date","","The publication date for the content of the channel.",0,null],[12,"last_build_date","","The date that the contents of the channel last changed.",0,null],[12,"categories","","The categories the channel belongs to.",0,null],[12,"generator","","The program used to generate the channel.",0,null],[12,"docs","","A URL that points to the documentation for the RSS format.",0,null],[12,"cloud","","The cloud to register with to be notified of updates to the channel.",0,null],[12,"ttl","","The number of minutes the channel can be cached before refreshing.",0,null],[12,"image","","An image that can be displayed with the channel.",0,null],[12,"text_input","","A text input box that can be displayed with the channel.",0,null],[12,"skip_hours","","A hint to tell the aggregator which hours it can skip.",0,null],[12,"skip_days","","A hint to tell the aggregator which days it can skip.",0,null],[12,"items","","The items in the channel.",0,null],[12,"extensions","","The extensions for the channel.",0,null],[12,"itunes_ext","","The iTunes extension for the channel.",0,null],[12,"dublin_core_ext","","The Dublin Core extension for the channel.",0,null],[12,"namespaces","","The namespaces present in the RSS tag.",0,null],[3,"Item","","A representation of the `&lt;item&gt;` element.",null,null],[12,"title","","The title of the item.",1,null],[12,"link","","The URL of the item.",1,null],[12,"description","","The item synopsis.",1,null],[12,"author","","The email address of author of the item.",1,null],[12,"categories","","The categories the item belongs to.",1,null],[12,"comments","","The URL for the comments page of the item.",1,null],[12,"enclosure","","The description of a media object that is attached to the item.",1,null],[12,"guid","","A unique identifier for the item.",1,null],[12,"pub_date","","The date the item was published.",1,null],[12,"source","","The RSS channel the item came from.",1,null],[12,"content","","The HTML contents of the item.",1,null],[12,"extensions","","The extensions for the item.",1,null],[12,"itunes_ext","","The iTunes extension for the item.",1,null],[12,"dublin_core_ext","","The Dublin Core extension for the item.",1,null],[3,"Category","","A representation of the `&lt;category&gt;` element.",null,null],[12,"name","","The name of the category.",2,null],[12,"domain","","The domain for the category.",2,null],[3,"Guid","","A representation of the `&lt;guid&gt;` element.",null,null],[12,"value","","The value of the GUID.",3,null],[12,"is_permalink","","Indicates if the GUID is a permalink.",3,null],[3,"Enclosure","","A representation of the `&lt;enclosure&gt;` element.",null,null],[12,"url","","The URL of the enclosure.",4,null],[12,"length","","The length of the enclosure in bytes.",4,null],[12,"mime_type","","The MIME type of the enclosure.",4,null],[3,"Source","","A representation of the `&lt;source&gt;` element.",null,null],[12,"url","","The URL of the source.",5,null],[12,"title","","The title of the source.",5,null],[3,"Cloud","","A representation of the `&lt;cloud&gt;` element.",null,null],[12,"domain","","The domain to register with.",6,null],[12,"port","","The port to register with.",6,null],[12,"path","","The path to register with.",6,null],[12,"register_procedure","","The procedure to register with.",6,null],[12,"protocol","","The protocol to register with.",6,null],[3,"Image","","A representation of the `&lt;image&gt;` element.",null,null],[12,"url","","The URL of the channel image.",7,null],[12,"title","","A description of the image. This is used in the HTML `alt` attribute.",7,null],[12,"link","","The URL that the image links to.",7,null],[12,"width","","The width of the image.",7,null],[12,"height","","The height of the image.",7,null],[12,"description","","The text for the HTML `title` attribute.",7,null],[3,"TextInput","","A representation of the `&lt;textInput&gt;` element.",null,null],[12,"title","","The label of the Submit button for the text input.",8,null],[12,"description","","A description of the text input.",8,null],[12,"name","","The name of the text object.",8,null],[12,"link","","The URL of the CGI script that processes the text input request.",8,null],[4,"Error","","Types of errors that could occur while parsing an RSS feed.",null,null],[13,"Utf8","","An error occurred while converting bytes to UTF8.",9,null],[13,"XmlParsing","","An XML parser error occurred at the specified byte offset.",9,null],[13,"Xml","","An XML error occurred.",9,null],[13,"EOF","","The end of the input was reached without finding a complete channel element.",9,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"channel"}}],[11,"fmt","","",0,null],[11,"read_from","","Attempt to read the RSS channel from the speficied reader.",0,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"write_to","","Attempt to write the RSS channel as XML to the speficied writer.",0,null],[11,"to_string","","",0,null],[11,"from_str","","Attempt to read the RSS channel from the speficied str.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"item"}}],[11,"fmt","","",1,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"category"}}],[11,"fmt","","",2,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"enclosure"}}],[11,"fmt","","",4,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"source"}}],[11,"fmt","","",5,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"default","","",6,{"inputs":[],"output":{"name":"cloud"}}],[11,"fmt","","",6,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"image"}}],[11,"fmt","","",7,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"clone","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"textinput"}}],[11,"fmt","","",8,null],[0,"extension","","Types and functions for namespaced extensions.",null,null],[3,"Extension","rss::extension","A namespaced extension such as iTunes or Dublin Core.",null,null],[12,"name","","The qualified name of the extension element.",10,null],[12,"value","","The content of the extension element.",10,null],[12,"attrs","","The attributes for the extension element.",10,null],[12,"children","","The children of the extension element. This is a map of local names to child\nelements.",10,null],[5,"get_extension_value","","Get a reference to the value for the first extension with the specified key.",null,{"inputs":[{"name":"hashmap"},{"name":"str"}],"output":{"name":"option"}}],[5,"remove_extension_value","","Remove and return the value for the first extension with the specified key.",null,{"inputs":[{"name":"hashmap"},{"name":"str"}],"output":{"name":"option"}}],[5,"get_extension_values","","Get a reference to all values for the extensions with the specified key.",null,{"inputs":[{"name":"hashmap"},{"name":"str"}],"output":{"name":"option"}}],[5,"remove_extension_values","","Remove and return all values for the extensions with the specified key.",null,{"inputs":[{"name":"hashmap"},{"name":"str"}],"output":{"name":"option"}}],[0,"itunes","","Types and functions for\n[iTunes](https://help.apple.com/itc/podcasts_connect/#/itcb54353390) extensions.",null,null],[3,"ITunesChannelExtension","rss::extension::itunes","An iTunes channel element extension.",null,null],[12,"author","","The author of the podcast.",11,null],[12,"block","","Specifies if the podcast should be prevented from appearing in the iTunes Store. A value of\n`Yes` indicates that the podcast should not show up in the iTunes Store. All other values\nare ignored.",11,null],[12,"categories","","The iTunes categories the podcast belongs to.",11,null],[12,"image","","The artwork for the podcast.",11,null],[12,"explicit","","Specifies whether the podcast contains explicit content. A value of `Yes`, `Explicit`, or\n`True` indicates that the podcast contains explicit content. A value of `Clean`, `No`,\n`False` inidicates that none of the episodes contain explicit content.",11,null],[12,"complete","","Specifies whether the podcast is complete and no new episodes will be posted. A value of\n`Yes` indicates that the podcast is complete.",11,null],[12,"new_feed_url","","The new URL where the podcast is located.",11,null],[12,"owner","","The contact information for the owner of the podcast.",11,null],[12,"subtitle","","A description of the podcast.",11,null],[12,"summary","","A summary of the podcast.",11,null],[12,"keywords","","Keywords for the podcast. The string contains a comma separated list of keywords.",11,null],[3,"ITunesItemExtension","","An iTunes item element extension.",null,null],[12,"author","","The author of the podcast episode.",12,null],[12,"block","","Specifies if the podcast episode should be prevented from appearing in the iTunes Store. A\nvalue of `Yes` indicates that the episode should not show up in the iTunes Store. All other\nvalues are ignored.",12,null],[12,"image","","The artwork for the podcast episode.",12,null],[12,"duration","","The podcast episode duration in one of the following formats: HH:MM:SS, H:MM:SS, MM:SS,\nM:SS.",12,null],[12,"explicit","","Specifies whether the podcast episode contains explicit content. A value of `Yes`,\n`Explicit`, or `True` indicates that the episode contains explicit content. A value of\n`Clean`, `No`, `False` inidicates that episode does not contain explicit content.",12,null],[12,"closed_captioned","","Specifies whether the podcast episode contains embedded closed captioning. A value of `Yes`\nindicates that it does. Any other value indicates that it does not.",12,null],[12,"order","","A value used to override the default sorting order for episodes.",12,null],[12,"subtitle","","A description of the podcast episode.",12,null],[12,"summary","","A summary of the podcast episode.",12,null],[12,"keywords","","Keywords for the podcast. The string contains a comma separated list of keywords.",12,null],[3,"ITunesCategory","","A category for an iTunes podcast.",null,null],[12,"text","","The name of the category.",13,null],[12,"subcategory","","An optional subcategory for the cagetory.",13,null],[3,"ITunesOwner","","The contact information for the owner of an iTunes podcast.",null,null],[12,"name","","The name of the owner.",14,null],[12,"email","","The email of the email.",14,null],[7,"NAMESPACE","","The iTunes XML namespace.",null,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"default","","",11,{"inputs":[],"output":{"name":"ituneschannelextension"}}],[11,"fmt","","",11,null],[11,"from_map","","Creates an ITunesChannelExtension using the specified hashmap.",11,{"inputs":[{"name":"hashmap"}],"output":{"name":"self"}}],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"default","","",12,{"inputs":[],"output":{"name":"itunesitemextension"}}],[11,"fmt","","",12,null],[11,"from_map","","Creates an ITunesChannelExtension using the specified hashmap.",12,{"inputs":[{"name":"hashmap"}],"output":{"name":"self"}}],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"default","","",13,{"inputs":[],"output":{"name":"itunescategory"}}],[11,"fmt","","",13,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"default","","",14,{"inputs":[],"output":{"name":"itunesowner"}}],[11,"fmt","","",14,null],[0,"dublincore","rss::extension","Types and functions for [Dublin Core](http://dublincore.org/documents/dces/) extensions.",null,null],[3,"DublinCoreExtension","rss::extension::dublincore","A Dublin Core element extension.",null,null],[12,"contributor","","An entity responsible for making contributions to the resource.",15,null],[12,"coverage","","The spatial or temporal topic of the resource, the spatial applicability of the resource,\nor the jurisdiction under which the resource is relevant.",15,null],[12,"creator","","An entity primarily responsible for making the resource.",15,null],[12,"date","","A point or period of time associated with an event in the lifecycle of the resource.",15,null],[12,"description","","An account of the resource.",15,null],[12,"format","","The file format, physical medium, or dimensions of the resource.",15,null],[12,"identifier","","An unambiguous reference to the resource within a given context.",15,null],[12,"language","","A language of the resource.",15,null],[12,"publisher","","An entity responsible for making the resource available.",15,null],[12,"relation","","A related resource.",15,null],[12,"rights","","Information about rights held in and over the resource.",15,null],[12,"source","","A related resource from which the described resource is derived.",15,null],[12,"subject","","The topic of the resource.",15,null],[12,"title","","A name given to the resource.",15,null],[12,"resource_type","","The nature or genre of the resource.",15,null],[7,"NAMESPACE","","The Dublin Core XML namespace.",null,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"clone","","",15,null],[11,"default","","",15,{"inputs":[],"output":{"name":"dublincoreextension"}}],[11,"fmt","","",15,null],[11,"from_map","","Creates a DublinCoreExtension using the specified hashmap.",15,{"inputs":[{"name":"hashmap"}],"output":{"name":"self"}}],[6,"ExtensionMap","rss::extension","A map of extension namespace prefixes to local names to elements.",null,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"default","","",10,{"inputs":[],"output":{"name":"extension"}}],[11,"fmt","","",10,null],[11,"fmt","rss","",9,null],[11,"description","","",9,null],[11,"cause","","",9,null],[11,"fmt","","",9,null],[11,"from","","",9,null],[11,"from","","",9,{"inputs":[{"name":"xmlerror"}],"output":{"name":"error"}}],[11,"from","","",9,{"inputs":[{"name":"utf8error"}],"output":{"name":"error"}}],[11,"from","","",9,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}]],"paths":[[3,"Channel"],[3,"Item"],[3,"Category"],[3,"Guid"],[3,"Enclosure"],[3,"Source"],[3,"Cloud"],[3,"Image"],[3,"TextInput"],[4,"Error"],[3,"Extension"],[3,"ITunesChannelExtension"],[3,"ITunesItemExtension"],[3,"ITunesCategory"],[3,"ITunesOwner"],[3,"DublinCoreExtension"]]};
searchIndex["quick_xml"] = {"doc":"High performance xml reader/writer.","items":[[3,"XmlReader","quick_xml","A Xml reader",null,null],[3,"Element","","General content of an event (aka node)",null,null],[3,"XmlDecl","","Wrapper around `Element` to parse `XmlDecl`",null,null],[3,"XmlWriter","","Xml writer",null,null],[4,"Event","","Event to interprete node as they are parsed",null,null],[13,"Start","","Start tag (with attributes) &lt;...&gt;",0,null],[13,"End","","End tag &lt;/...&gt;",0,null],[13,"Empty","","Empty element tag (with attributes) &lt;.../&gt;",0,null],[13,"Text","","Data between Start and End element",0,null],[13,"Comment","","Comment &lt;!-- ... --&gt;",0,null],[13,"CData","","CData &lt;![CDATA[...]]&gt;",0,null],[13,"Decl","","Xml declaration &lt;?xml ...?&gt;",0,null],[13,"PI","","Processing instruction &lt;?...?&gt;",0,null],[13,"DocType","","Doctype &lt;!DOCTYPE...&gt;",0,null],[0,"error","","Error management module",null,null],[4,"Error","quick_xml::error","An error produced by an operation on Xml data.",null,null],[13,"Io","","An error originating from reading or writing to the underlying buffer.",1,null],[13,"EOL","","An error originating from finding end of line instead of a column.",1,null],[13,"Utf8","","An error while converting to utf8",1,null],[13,"Malformed","","Xml is malformed",1,null],[13,"Unexpected","","Unexpected",1,null],[6,"Result","","Result type",null,null],[6,"ResultPos","","Result type with position",null,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"utf8error"}],"output":{"name":"error"}}],[0,"attributes","quick_xml","Xml Attributes module",null,null],[3,"Attributes","quick_xml::attributes","Iterator over attributes key/value pairs",null,null],[3,"UnescapedAttributes","","Escaped attributes",null,null],[11,"clone","","",2,null],[11,"new","","creates a new attribute iterator from a buffer",2,null],[11,"unescaped","","gets unescaped variant",2,null],[11,"with_checks","","check if attributes are distincts",2,null],[11,"next","","",2,null],[11,"next","","",3,null],[0,"namespace","quick_xml","Module for managing `XmlnsReader` iterator",null,null],[3,"XmlnsReader","quick_xml::namespace","`XmlnsReader` iterator which wraps `XmlReader` iterator and\nadds namespace resolutions",null,null],[11,"clone","","",4,null],[11,"new","","Converts a `XmlReader` into a `XmlnsReader` iterator",4,{"inputs":[{"name":"xmlreader"}],"output":{"name":"xmlnsreader"}}],[11,"resolve","","Resolves a qualified name into (namespace value, local name)",4,null],[11,"next","","",4,null],[8,"AsStr","quick_xml","A trait to support on-demand conversion from UTF-8",null,null],[10,"as_str","","Converts this to an `&amp;str`",5,null],[11,"clone","","",6,null],[11,"from","","",6,{"inputs":[{"name":"str"}],"output":{"name":"xmlreader"}}],[11,"from_reader","","Creates a XmlReader from a generic BufReader",6,{"inputs":[{"name":"b"}],"output":{"name":"xmlreader"}}],[11,"namespaced","","Converts into a `XmlnsReader` iterator",6,null],[11,"expand_empty_elements","","Change expand_empty_elements default behaviour (true per default)",6,null],[11,"trim_text","","Change trim_text default behaviour (false per default)",6,null],[11,"with_check","","Change default with_check (true per default)",6,null],[11,"check_comments","","Change default check_comment (false per default)",6,null],[11,"read_to_end","","Reads until end element is found",6,null],[11,"read_text","","Reads next event, if `Event::Text` or `Event::End`,\nthen returns a `String`, else returns an error",6,null],[11,"buffer_position","","Gets the current BufRead position\nUseful when debugging errors",6,null],[11,"from_file","","Creates a xml reader from a file path",6,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"next","","",6,null],[11,"clone","","",7,null],[11,"new","","Creates a new Element from the given name.\nname is a reference that can be converted to a byte slice,\nsuch as &amp;[u8] or &amp;str",7,{"inputs":[{"name":"a"}],"output":{"name":"element"}}],[11,"with_attributes","","Consumes self and adds attributes to this element from an iterator\nover (key, value) tuples.\nKey and value can be anything that implements the AsRef&lt;[u8]&gt; trait,\nlike byte slices and strings.",7,null],[11,"name","","name as &amp;[u8] (without eventual attributes)",7,null],[11,"content","","whole content as &amp;[u8] (including eventual attributes)",7,null],[11,"unescaped_content","","gets escaped content",7,null],[11,"attributes","","gets attributes iterator",7,null],[11,"unescaped_attributes","","gets attributes iterator whose attribute values are unescaped (&#39;&amp;...;&#39; replaced\nby their corresponding character)",7,null],[11,"extend_attributes","","extend the attributes of this element from an iterator over (key, value) tuples.\nKey and value can be anything that implements the AsRef&lt;[u8]&gt; trait,\nlike byte slices and strings.",7,null],[11,"into_string","","consumes entire self (including eventual attributes!) and returns `String`",7,null],[11,"push_attribute","","Adds an attribute to this element from the given key and value.\nKey and value can be anything that implements the AsRef&lt;[u8]&gt; trait,\nlike byte slices and strings.",7,null],[11,"fmt","","",7,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"version","","Gets xml version, including quotes (&#39; or &quot;)",8,null],[11,"encoding","","Gets xml encoding, including quotes (&#39; or &quot;)",8,null],[11,"standalone","","Gets xml standalone, including quotes (&#39; or &quot;)",8,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"element","","returns inner Element for the event",0,null],[11,"clone","","",9,null],[11,"new","","Creates a XmlWriter from a generic Write",9,{"inputs":[{"name":"w"}],"output":{"name":"xmlwriter"}}],[11,"into_inner","","Consumes this `XmlWriter`, returning the underlying writer.",9,null],[11,"write","","Writes the given event to the underlying writer.",9,null]],"paths":[[4,"Event"],[4,"Error"],[3,"Attributes"],[3,"UnescapedAttributes"],[3,"XmlnsReader"],[8,"AsStr"],[3,"XmlReader"],[3,"Element"],[3,"XmlDecl"],[3,"XmlWriter"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,null],[10,"log","","Logs the `LogRecord`.",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"args","","The message body.",3,null],[11,"metadata","","Metadata about the log directive.",3,null],[11,"location","","The location of the log directive.",3,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"level","","The verbosity level of the message.",4,null],[11,"target","","The name of the target of the directive.",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"module_path","","The module path of the message.",5,null],[11,"file","","The source file containing the message.",5,null],[11,"line","","The line containing the message.",5,null],[11,"fmt","","",6,null],[11,"get","","Gets the current maximum log level filter.",6,null],[11,"set","","Sets the maximum log level.",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
initSearch(searchIndex);
